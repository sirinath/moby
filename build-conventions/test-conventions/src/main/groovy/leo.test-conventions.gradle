import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
	repositories {
		mavenLocal()
		gradlePluginPortal()
		mavenCentral()
		google()
		jcenter()
	}
}

plugins {
	id 'base'
	id 'java'

	id 'leo.version-conventions'
}

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	google()
	gradlePluginPortal()
}

test {
	// enable TestNG support (default is JUnit)
	useTestNG() {
		useDefaultListeners = true

		// runlist to executed. path is relative to current folder
		suites 'src/test/resources/testng.xml'
	}

	// turn off Gradle's HTML report to avoid replacing the
	// reports generated by TestNG library
	reports.html.enabled = false

	// set a system property for the test JVM(s)
	// systemProperty 'some.prop', 'value'

	// explicitly include or exclude tests
	// include 'org/foo/**'
	// exclude 'org/boo/**'

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("---")
		logger.lifecycle("# Running test: " + descriptor)
	}

	beforeSuite { suite ->
		logger.lifecycle("===")
		logger.lifecycle("* Running suite: " + suite)
	}

	afterTest { descriptor, result ->
		logger.lifecycle("# Ran test: " + descriptor + " with resutls: " + result)
		logger.lifecycle("---")
	}

	afterSuite { suite, result ->
		logger.lifecycle("* Ran suite: " + suite + " with resutls: " + result)
		logger.lifecycle("===")
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event)
	}

	// Fail the 'test' task on the first test failure
	failFast = false
	ignoreFailures = true

	//we want display the following test events
	testLogging {
		events TestLogEvent.STARTED,
				TestLogEvent.FAILED,
				TestLogEvent.SKIPPED

		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true
		showStandardStreams true

		// set options for log level DEBUG
		debug {
			events TestLogEvent.STARTED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED

			exceptionFormat TestExceptionFormat.FULL
			showExceptions true
			showCauses true
			showStackTraces true
			showStandardStreams true
		}

		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat
		info.showExceptions = debug.showExceptions
		info.showCauses = debug.showCauses
		info.showStackTraces = debug.showStackTraces
		info.showStandardStreams = debug.showStandardStreams

		warn.events = debug.events
		warn.exceptionFormat = debug.exceptionFormat
		warn.showExceptions = debug.showExceptions
		warn.showCauses = debug.showCauses
		warn.showStackTraces = debug.showStackTraces
		warn.showStandardStreams = debug.showStandardStreams

		error.events = debug.events
		error.exceptionFormat = debug.exceptionFormat
		error.showExceptions = debug.showExceptions
		error.showCauses = debug.showCauses
		error.showStackTraces = debug.showStackTraces
		error.showStandardStreams = debug.showStandardStreams
	}
}

dependencies {
	testImplementation group: 'org.testng', name:'testng', version: "$testNGVersion"
}